On suppose l'installation dans un répertoire /srv/instances/dmsmail
 (qui peut être changé) et sur une distribution ubuntu.
Le nom de votre utilisateur est remplacé dans nos commandes par "username".
Chaque commande, précisée ci-dessous après le symbole ">", peut être exécutée
 (sans taper le symbole >).

On passe d'abord en root
> sudo -s

Considérant une nouvelle installation d'Ubuntu propre, certaines librairies doivent être isntallées au préalable
> apt install curl 
> apt install g++
> apt install gcc
> apt install make
> apt install cmake
> apt install build-essential
> apt install libreadline6-dev
> apt install zlib1g-dev (support zlib)
> apt install libbz2-dev
> apt install libjpeg62-dev
> apt install subversion
> apt install git
> apt install libpq-dev
> apt install libxml2-dev
> apt install libxslt1-dev
> apt install libssl-dev
> apt install pkg-config
> apt install graphviz graphviz-dev
> apt install odt2txt

Pour documentviewer, nous avons besoin de Ruby 2.7.6, ce qui requiert RVM (Ruby Version Manager) :
> apt install gnupg2
> curl -sSL https://get.rvm.io | bash -s stable
> source ~/.rvm/scripts/rvm
Puis Ruby 2.7.6 :
> rvm pkg install openssl
> rvm install ruby-2.7.6 --with-openssl-dir=$HOME/.rvm/usr
Pour voir la version de ruby installée :
> which ruby
Création d'un lien symbolique pour que docsplit puisse utiliser ruby (si pas de ruby système) :
> ln -s $HOME/.rvm/rubies/ruby-2.7.6/bin/ruby /usr/bin/ruby2.7
Enfin, on peut installer les autres dépendances de documentviewer :
> gem install docsplit
> apt install graphicsmagick
> apt install wv

Dépendance d'imio.helpers pour la génération de code-barre
> apt install libpng-dev
> wget https://sourceforge.net/projects/zint/files/zint/2.9.1/zint-2.9.1-src.tar.gz
> tar -xvf zint-2.9.1-src.tar.gz
> cd zint-2.9.1-src
> mkdir build
> cd build
> cmake ..
> make install

On va travailler dans le dossier /srv
> cd /srv

On se met propriétaire du dossier pour ne plus devoir travailler en root
> chown -R username:username .

On quitte l'utilisateur root.
> exit

Dans /srv/, on crée un dossier qui contiendra nos répertoires de code, puis on clone le répertoire server.dmsmail via git :
> mkdir src
> cd /srv/src
> git clone git@github.com:IMIO/server.dmsmail.git dmsmail
> cd dmsmail

On doit installer python2.7 qui sera utilisé dans notre buildout. On va l'installer via Pyenv.

Dépendances de Pyenv qui n'ont pas été installées dans la section précédente :
> sudo apt update
> sudo apt install libsqlite3-dev llvm libncursesw5-dev xz-utils /
tk-dev libxmlsec1-dev libffi-dev liblzma-dev libsasl2-dev python3-dev libldap2-dev

Installer Pyenv et le configurer : 
> curl https://pyenv.run | bash
> echo 'export PYENV_ROOT="$HOME/.pyenv"' >> ~/.bashrc
> echo 'command -v pyenv >/dev/null || export PATH="$PYENV_ROOT/bin:$PATH"' >> ~/.bashrc
> echo 'eval "$(pyenv init -)"' >> ~/.bashrc
> pyenv install 2.7.18
> pyenv local 2.7.18

Installer virtual-env et l'activer dans server.dmsmail :
> pip install virtualenv
> virtualenv .

On définit un cache pour buildout (si ce n'est déjà fait)
> vi ~/.buildout/default.cfg
[buildout]
eggs-directory = /srv/cache/eggs
download-cache = /srv/cache/downloads
extends-cache = /srv/cache/extends
> mkdir -p /srv/cache/{eggs,downloads,extends}

On initialise le buildout
> make setup

==> 1) Utilisation en développement (sans ZEO, avec des outils de debug)

Le fichier buildout.cfg utilise par défaut dev.cfg.

On exécute le buildout après chaque modification du fichier buildout.cfg
> make buildout
OU
> bin/buildout -v

On démarre le serveur zope.
> bin/instance1 fg
OU
> bin/instance1 start

On peut se connecter à zope dans un navigateur sur l'adresse http://localhost:8081/manage_main

On peut ajouter un mount point (fichier db séparé à définir dans le fichier zope_add.conf)
=> choisir dans la liste (en haut à droite de la page du navigateur) "ZODB Mount Point"
Sélectionner le nom du mount point désiré ("xxx" et cliquer sur "Create selected mount points").

Tout ce qui va être ajouté dans le dossier "xxx" sera maintenant localisé dans le fichier db "xxx.fs"
 plutôt que dans "Data.fs".

==> 2) Utilisation en production (plusieurs instances Zope pour la même database, ZEO)

Il faut remplacer dans le fichier buildout.cfg l'appel à dev.cfg par prod.cf.

On exécute le buildout après chaque modification du fichier buildout.cfg
> make buildout
OU
> bin/buildout -v

On démarre le serveur ZEO.
> bin/zeoserver start

On démarre chaque instance zope (suivant le nom de la section définie).
> bin/instance1 fg
OU
> bin/instance1 start

On peut se connecter à zope dans un navigateur sur l'adresse http://localhost:8081/manage_main

On peut ajouter un mount point (fichier db séparé à définir dans les fichiers zeo_add.conf et zope_add_zeo.conf)
=> choisir dans la liste (en haut à droite de la page du navigateur) "ZODB Mount Point"
Sélectionner le nom du mount point désiré ("xxx" et cliquer sur "Create selected mount points").

Tout ce qui va être ajouté dans le dossier "xxx" sera maintenant localisé dans le fichier db "xxx.fs"
 plutôt que dans "Data.fs".

==> 3) Utilisation de solr

Décomment solr.cfg dans buildout.cfg.
Relancer le buildout.
Installer le module collective.solr dans le site Plone.
Indexer dans solr : appeler /@@solr-maintenance/reindex dans le site Plone.
