On suppose l'installation dans un répertoire /srv/instances/dmsmail
 (qui peut être changé) et sur une distribution ubuntu.
Le nom de votre utilisateur est remplacé dans nos commandes par "votreuser".
 Veuillez utiliser le votre à la place.
Chaque commande, précisée ci-dessous après le symbole ">", peut être exécutée
 (sans taper le symbole >).

On passe d'abord en root
> sudo -s

On installe des librairies nécessaires
> apt install build-essential
> apt install libreadline5-dev
> apt install zlib1g-dev (support zlib)
> apt install libjpeg62-dev
> apt install subversion
> apt install git
> apt install libpq-dev
> apt install libxml2-dev
> apt install libxslt1-dev
> apt install graphviz graphviz-dev (si pb au buildout, pkg-config en plus)
> apt install odt2txt

Dépendances de documentviewer:
> apt install rubygems
> gem install docsplit
> apt install graphicsmagick
> apt install poppler-utils
> apt install wv

Dépendance d'imio.helpers pour la génération de code-barre
> apt install libpng12-dev
> wget https://10gbps-io.dl.sourceforge.net/project/zint/zint/2.6.0/zint_2.6.0_amd64.deb
> dpkg -i zint_2.6.0_amd64.deb

On va travailler dans le dossier /srv
> cd /srv

On se met propriétaire du dossier pour ne plus devoir travailler en root
> chown -R votreuser:votreuser .

On quitte l'utilisateur root.
> exit

On crée maintenant une arborescence de dossiers
> mkdir jinstall
> mkdir instances
> cd jinstall

On va installer un python2.7 qui sera utilisé dans notre buildout
> wget https://www.python.org/ftp/python/2.7.14/Python-2.7.14.tar.xz
> tar xvJf Python-2.7.14.tar.xz
> cd Python-2.7.14
> ./configure --prefix=/srv/python2714 --enable-optimizations
> make
> make install

On installe l'utilitaire python virtualenv
> cd /srv/python2714
> bin/python -m ensurepip
> bin/pip install virtualenv
> sudo ln -s /srv/python2.7.14/bin/virtualenv /usr/local/bin/virtualenv-2.7

On définit un cache pour buildout (si ce n'est déjà fait)
Voir http://www.imio.be/support/documentation/tutoriels/utilisation-dun-buildout/definition-dun-cache-pour-buildout/

On télécharge le buildout dans un dossier
> cd /srv/instances
> svn co http://svn.communesplone.org/svn/communesplone/buildout/server.dmsmail/trunk dmsmail
> cd dmsmail

On initialise le buildout
> make bootstrap

1) Utilisation en développement (sans ZEO, avec des outils de debug)

Le fichier buildout.cfg utilise par défaut dev.cfg.

On exécute le buildout après chaque modification du fichier buildout.cfg
> make buildout
OU
> bin/buildout -v

On démarre le serveur zope.
> bin/instance1 fg
OU
> bin/instance1 start

On peut se connecter à zope dans un navigateur sur l'adresse http://localhost:8081/manage_main

On peut ajouter un mount point (fichier db séparé à définir dans le fichier zope_add.conf)
=> choisir dans la liste (en haut à droite de la page du navigateur) "ZODB Mount Point"
Sélectionner le nom du mount point désiré ("xxx" et cliquer sur "Create selected mount points").

Tout ce qui va être ajouté dans le dossier "xxx" sera maintenant localisé dans le fichier db "xxx.fs"
 plutôt que dans "Data.fs".

2) Utilisation en production (plusieurs instances Zope pour la même database, ZEO)

Il faut remplacer dans le fichier buildout.cfg l'appel à dev.cfg par prod.cf.

On exécute le buildout après chaque modification du fichier buildout.cfg
> make buildout
OU
> bin/buildout -v

On démarre le serveur ZEO.
> bin/zeoserver start

On démarre chaque instance zope (suivant le nom de la section définie).
> bin/instance1 fg
OU
> bin/instance1 start

On peut se connecter à zope dans un navigateur sur l'adresse http://localhost:8081/manage_main

On peut ajouter un mount point (fichier db séparé à définir dans les fichiers zeo_add.conf et zope_add_zeo.conf)
=> choisir dans la liste (en haut à droite de la page du navigateur) "ZODB Mount Point"
Sélectionner le nom du mount point désiré ("xxx" et cliquer sur "Create selected mount points").

Tout ce qui va être ajouté dans le dossier "xxx" sera maintenant localisé dans le fichier db "xxx.fs"
 plutôt que dans "Data.fs".
