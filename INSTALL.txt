We assume the installation in the folder /srv/instances/dmsmail
 (that can be changed) and on an ubuntu distribution.
Your real username must replace in our commands the string "username".
Each command, specified by the symbol ">", can be executed
 (without the symbol >).

First we become root
> sudo -s

We install the necessary libraries
> apt install curl 
> apt install g++
> apt install gcc
> apt install make
> apt install cmake
> apt install build-essential
> apt install libreadline6-dev
> apt install zlib1g-dev (support zlib)
> apt install libbz2-dev
> apt install libjpeg62-dev
> apt install subversion
> apt install git
> apt install libpq-dev
> apt install libxml2-dev
> apt install libxslt1-dev
> apt install libssl-dev
> apt install graphviz graphviz-dev (si pb au buildout, pkg-config en plus)
> apt install odt2txt

For documentviewer, we need Ruby 2.7.6, wich asks for RVM (Ruby Version Manager) :
> apt install gnupg2
> curl -sSL https://get.rvm.io | bash -s stable
> source ~/.rvm/scripts/rvm
Then Ruby 2.7.6 :
> rvm pkg install openssl
> rvm install ruby-2.7.6 --with-openssl-dir=$HOME/.rvm/usr
See installed Ruby version :
> which ruby
Then other documentviewer dependancies :
> gem install docsplit
> apt install graphicsmagick
> apt install wv

imio.helpers barcode generation
> apt install libpng-dev
> wget https://sourceforge.net/projects/zint/files/zint/2.9.1/zint-2.9.1-src.tar.gz
> tar -xvf zint-2.9.1-src.tar.gz
> cd zint-2.9.1-src
> mkdir build
> cd build
> cmake ..
> make install

We work in the folder /srv
> cd /srv

We change the owner of the folder to avoid continue working as root
> chown -R username:username .

We leave the user root.
> exit

We create a directory in /srv/ which will host all our code repositories. Then clone the server.dmsmail repo :
> mkdir src
> cd /srv/src
> git clone git@github.com:IMIO/server.dmsmail.git dmsmail
> cd dmsmail

We need Python2.7, and we'll install it through Pyenv :

Pyenv dependancies :
> sudo apt update
> sudo apt install libsqlite3-dev llvm libncursesw5-dev xz-utils /
tk-dev libxmlsec1-dev libffi-dev liblzma-dev libsasl2-dev python3-dev libldap2-dev

Install Pyenv and configure it :
> curl https://pyenv.run | bash
> echo 'export PYENV_ROOT="$HOME/.pyenv"' >> ~/.bashrc
> echo 'command -v pyenv >/dev/null || export PATH="$PYENV_ROOT/bin:$PATH"' >> ~/.bashrc
> echo 'eval "$(pyenv init -)"' >> ~/.bashrc
> pyenv install 2.7.18
> pyenv local 2.7.18

Install virtual-env and activate it in server.dmsmail :
> pip install virtualenv
> virtualenv .

We can define a cache for buildout
> vi ~/.buildout/default.cfg
[buildout]
eggs-directory = /srv/cache/eggs
download-cache = /srv/cache/downloads
extends-cache = /srv/cache/extends
> mkdir -p /srv/cache/{eggs,downloads,extends}

We initialize the buildout
> make setup

==> 1) Use in development (without ZEO, with debug products)

We execute the buildout after each modification in the buildout.cfg file
> make buildout
OR
> bin/buildout -v

We start the zope server.
> bin/instance1 fg
OR
> bin/instance1 start

We can connect the zope server in a browser on the following address http://localhost:8081/manage_main

We can add a mount point (separate database file, defined in the file zope_add.conf)
=> choose in the list (up right in the browser page) "ZODB Mount Point"
Select a mount point name ("xxx" and click on "Create selected mount points").

All objects added in the zope folder "xxx" will be stored in the db file "xxx.fs"
 in place of in "Data.fs".

==> 2) Usage in production (multiple Zope instances for the same database, ZEO mode)

We can replace in the file buildout.cfg the name dev.cfg by prod.cfg.

We execute the buildout after each modification in the buildout.cfg file
> make buildout
OR
> bin/buildout -v

We start the zeo server.
> bin/zeoserver start

We start each zope server (following instance name section).
> bin/instance1 fg
OR
> bin/instance1 start

We can connect the zope server in a browser on the following address http://localhost:8081/manage_main

We can add a mount point (separate database file, defined in the file zeo_add.conf and zope_add_zeo.conf)
=> choose in the list (up right in the browser page) "ZODB Mount Point"
Select a mount point name ("xxx" and click on "Create selected mount points").

All objects added in the zope folder "xxx" will be stored in the db file "xxx.fs"
 in place of in "Data.fs".

==> 3) Use of solr

Uncomment solr.cfg in buildout.cfg.
Run buildout.
Install collective.solr product in plone site.
Index in solr : call /@@solr-maintenance/reindex in plone site.
